Trabajo Practico 2
==================

Parte 1: Bases de Datos NoSQL y Relacionales
--------------------------------------------

▶︎ Si bien las BBDD NoSQL tienen diferencias fundamentales con los sistemas de BBDD
Relacionales o RDBMS, algunos conceptos comunes se pueden relacionar.
Responda las siguientes preguntas, considerando MongoDB en particular como Base de Datos NoSQL.

1. ¿Cuáles de los siguientes conceptos de RDBMS existen en MongoDB? En caso de no existir, ¿hay alguna alternativa? ¿Cuál es?
• Base de Datos
• Tabla / Relación
• Fila / Tupla
• Columna

2. MongoDB tiene soporte para transacciones, pero no es igual que el de los RDBMS. ¿Cuál es el alcance de una transacción en MongoDB?
3. Para acelerar las consultas, MongoDB tiene soporte para índices. ¿Qué tipos de índices soporta?
4. ¿Existen claves foráneas en MongoDB?


Parte 2: Primeros pasos con MongoDB
-----------------------------------

5. Cree una nueva base de datos llamada turismo, y una colección llamada hoteles. En esa colección inserte un nuevo documento (un hotel) con los siguientes atributos:

> use turismo
switched to db turismo
> db.hoteles.save({nombre:'Hotel Avenida', estrellas:3})
WriteResult({ "nInserted" : 1 })
> db.hoteles.find()
{ "_id" : ObjectId("5940af300a11111bb7d5e795"), "nombre" : "Hotel Avenida", "estrellas" : 3 }
> db.hoteles.find().pretty()
{
    "_id" : ObjectId("5940af300a11111bb7d5e795"),
      "nombre" : "Hotel Avenida",
        "estrellas" : 3
}

Se le agrega un Object Id.

6. Agregue los siguientes documentos a la colección de hoteles:
> db.hoteles.save({nombre:'Hotel Lux', estrellas:3, amenities: ['piscina', 'gimnasio']})
WriteResult({ "nInserted" : 1 })
> db.hoteles.save({nombre:'Hotel Midas', estrellas:4, amenities: ['piscina']})
WriteResult({ "nInserted" : 1 })
> db.hoteles.save({nombre:'Genova Hotel', estrellas:3})
WriteResult({ "nInserted" : 1 })
> db.hoteles.save({nombre:'Paris Suites', estrellas:5, amenities: ['sauna']})
WriteResult({ "nInserted" : 1 })

> db.hoteles.find().pretty()
{
    "_id" : ObjectId("5940af300a11111bb7d5e795"),
      "nombre" : "Hotel Avenida",
        "estrellas" : 3
}
{
    "_id" : ObjectId("5940af8f0a11111bb7d5e796"),
      "nombre" : "Hotel Lux",
        "estrellas" : 3,
          "amenities" : [
              "piscina",
                  "gimnasio"
                    ]
}
{
    "_id" : ObjectId("5940af9f0a11111bb7d5e797"),
      "nombre" : "Hotel Midas",
        "estrellas" : 4,
          "amenities" : [
              "piscina"
                ]
}
{
    "_id" : ObjectId("5940afac0a11111bb7d5e798"),
      "nombre" : "Genova Hotel",
        "estrellas" : 3
}
{
    "_id" : ObjectId("5940afc10a11111bb7d5e799"),
      "nombre" : "Paris Suites",
        "estrellas" : 5,
          "amenities" : [
              "sauna"
                ]
}

Hoteles con 3 estrellas:
> db.hoteles.find({"estrellas":3 })
{ "_id" : ObjectId("5940af300a11111bb7d5e795"), "nombre" : "Hotel Avenida", "estrellas" : 3 }
{ "_id" : ObjectId("5940af8f0a11111bb7d5e796"), "nombre" : "Hotel Lux", "estrellas" : 3, "amenities" : [ "piscina", "gimnasio" ] }
{ "_id" : ObjectId("5940afac0a11111bb7d5e798"), "nombre" : "Genova Hotel", "estrellas" : 3 }

hoteles que incluyan la palabra 'Hotel' en su nombre:
> db.hoteles.find({"nombre": /Hotel/})
{ "_id" : ObjectId("5940af300a11111bb7d5e795"), "nombre" : "Hotel Avenida", "estrellas" : 3 }
{ "_id" : ObjectId("5940af8f0a11111bb7d5e796"), "nombre" : "Hotel Lux", "estrellas" : 3, "amenities" : [ "piscina", "gimnasio" ] }
{ "_id" : ObjectId("5940af9f0a11111bb7d5e797"), "nombre" : "Hotel Midas", "estrellas" : 4, "amenities" : [ "piscina"] }
{ "_id" : ObjectId("5940afac0a11111bb7d5e798"), "nombre" : "Genova Hotel", "estrellas" : 3 }

hoteles con 4 o mas estrellas:
> db.hoteles.find({"estrellas":{ $gt: 3 }} )
{ "_id" : ObjectId("5940af9f0a11111bb7d5e797"), "nombre" : "Hotel Midas", "estrellas" : 4, "amenities" : [ "piscina" ] }
{ "_id" : ObjectId("5940afc10a11111bb7d5e799"), "nombre" : "Paris Suites", "estrellas" : 5, "amenities" : [ "sauna" ] }

hoteles con la palabra "Hotel" en su nombre y mas de 3 estrellas
> db.hoteles.find({"nombre": /Hotel/, "estrellas":{$gt: 3}})
{ "_id" : ObjectId("5940af9f0a11111bb7d5e797"), "nombre" : "Hotel Midas", "estrellas" : 4, "amenities" : [ "piscina" ] }

hoteles con piscina:
> db.hoteles.find({"amenities": "piscina"})
{ "_id" : ObjectId("5940af8f0a11111bb7d5e796"), "nombre" : "Hotel Lux", "estrellas" : 3, "amenities" : [ "piscina", "gimnasio" ] }
{ "_id" : ObjectId("5940af9f0a11111bb7d5e797"), "nombre" : "Hotel Midas", "estrellas" : 4, "amenities" : [ "piscina" ] }

hoteles sin amenities (es decir, que el atributo este ausente)
> db.hoteles.find({"amenities": null })
{ "_id" : ObjectId("5940af300a11111bb7d5e795"), "nombre" : "Hotel Avenida", "estrellas" : 3 }
{ "_id" : ObjectId("5940afac0a11111bb7d5e798"), "nombre" : "Genova Hotel", "estrellas" : 3 }

hoteles sin aminities, proyectando solo el nombre:
> db.hoteles.find({"amenities": null }, {_id:0, nombre: 1})
{ "nombre" : "Hotel Avenida" }
{ "nombre" : "Genova Hotel" }


7. Actualice el “Hotel Lux” asignándole 4 estrellas.

> db.hoteles.update({nombre: "Hotel Lux"}, { $set: {estrellas: 4}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.hoteles.find()
{ "_id" : ObjectId("5940af300a11111bb7d5e795"), "nombre" : "Hotel Avenida", "estrellas" : 3 }
{ "_id" : ObjectId("5940af8f0a11111bb7d5e796"), "nombre" : "Hotel Lux", "estrellas" : 4, "amenities" : [ "piscina", "gimnasio" ] }
{ "_id" : ObjectId("5940af9f0a11111bb7d5e797"), "nombre" : "Hotel Midas", "estrellas" : 4, "amenities" : [ "piscina" ] }
{ "_id" : ObjectId("5940afac0a11111bb7d5e798"), "nombre" : "Genova Hotel", "estrellas" : 3 }
{ "_id" : ObjectId("5940afc10a11111bb7d5e799"), "nombre" : "Paris Suites", "estrellas" : 5, "amenities" : [ "sauna" ] }


8. Agregue “sauna” al listado de amenities del “Hotel Midas”.

> db.hoteles.update({nombre: "Hotel Midas"}, { $push: {amenities: "sauna"}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.hoteles.find()
{ "_id" : ObjectId("5940af300a11111bb7d5e795"), "nombre" : "Hotel Avenida", "estrellas" : 3 }
{ "_id" : ObjectId("5940af8f0a11111bb7d5e796"), "nombre" : "Hotel Lux", "estrellas" : 4, "amenities" : [ "piscina", "gimnasio" ] }
{ "_id" : ObjectId("5940af9f0a11111bb7d5e797"), "nombre" : "Hotel Midas", "estrellas" : 4, "amenities" : [ "piscina", "sauna" ] }
{ "_id" : ObjectId("5940afac0a11111bb7d5e798"), "nombre" : "Genova Hotel", "estrellas" : 3 }
{ "_id" : ObjectId("5940afc10a11111bb7d5e799"), "nombre" : "Paris Suites", "estrellas" : 5, "amenities" : [ "sauna" ] }

9. Agregue una estrella más a todos los hoteles con piscina.

> db.hoteles.update({"amenities": "piscina"}, { $inc: {estrellas: 1}}, {multi:true})
WriteResult({ "nMatched" : 2, "nUpserted" : 0, "nModified" : 2 })
> db.hoteles.find()
{ "_id" : ObjectId("5940af300a11111bb7d5e795"), "nombre" : "Hotel Avenida", "estrellas" : 3 }
{ "_id" : ObjectId("5940af8f0a11111bb7d5e796"), "nombre" : "Hotel Lux", "estrellas" : 5, "amenities" : [ "piscina", "gimnasio" ] }
{ "_id" : ObjectId("5940af9f0a11111bb7d5e797"), "nombre" : "Hotel Midas", "estrellas" : 5, "amenities" : [ "piscina", "sauna" ] }
{ "_id" : ObjectId("5940afac0a11111bb7d5e798"), "nombre" : "Genova Hotel", "estrellas" : 3 }
{ "_id" : ObjectId("5940afc10a11111bb7d5e799"), "nombre" : "Paris Suites", "estrellas" : 5, "amenities" : [ "sauna" ] }


Si amenities no existe
$exists:false

Parte 3: 
--------

10. Busque en la colección de hoteles si existe algún índice definido.

> db.hoteles.getIndexes()
	[
		{
			"v" : 2,
			"key" : {
				"_id" : 1
			},
			"name" : "_id_",
			"ns" : "turismo.hoteles"
		}
	]


11- 
Antes de agregarle un indice nuevo

```sh
> db.hoteles.find({nombre: /11/}).explain("executionStats")
...
...
...
	"totalDocsExamined" : 50000,
		"executionStages" : {
			"stage" : "COLLSCAN",
			"filter" : {
				"nombre" : {
					"$regex" : "11"
				}
			},
			"nReturned" : 2291,
			"executionTimeMillisEstimate" : 30,
```

Agrego un indice

> db.hoteles.createIndex({nombre:1})
{
	"createdCollectionAutomatically" : false,
	"numIndexesBefore" : 1,
	"numIndexesAfter" : 2,
	"ok" : 1
}
> db.hoteles.getIndexes()
[
	{
		"v" : 2,
		"key" : {
			"_id" : 1
		},
		"name" : "_id_",
		"ns" : "turismo.hoteles"
	},
	{
		"v" : 2,
		"key" : {
			"nombre" : 1
		},
		"name" : "nombre_1",
		"ns" : "turismo.hoteles"
	}
]

> db.hoteles.find({nombre: /11/}).explain("executionStats")

		"totalKeysExamined" : 50000,
		"totalDocsExamined" : 2291,
		"executionStages" : {
			"stage" : "FETCH",
			"nReturned" : 2291,
			"executionTimeMillisEstimate" : 50,


12. Busque los hoteles dentro de la provincia de la pampa

>lapampa = <archivo provisto lapampa.geojson>

>db.hoteles.aggregate([ { $match: {location: {$geoWithin: {$geometry: lapampa }}}}, {$out: "lapampas"} ])

Sin definir un indice

> db.hoteles.find({location: {$geoWithin: {$geometry: lapampa }}}).explain("executionStats")
	...
	"executionTimeMillisEstimate" : 181,
	"docsExamined" : 50000

Creo un indice

> db.hoteles.createIndex( { location: "2dsphere" })
{
	"createdCollectionAutomatically" : false,
	"numIndexesBefore" : 2,
	"numIndexesAfter" : 3,
	"ok" : 1
}

"executionTimeMillisEstimate" : 111,
	"docsExamined" : 10541,
















load('path')
db.hoteles.find(/sss/).explain
db.hoteles.createIndex({nombre:1})

'Mongodb compass' para ver la bd lindo.
Con indice 'deberia' buscar mas rapido, pero si no usa expresion regular.

Parte 4
-------

Query de a pasos.
db.hoteles.aggregate({$match{idem find}}) 
$geometry / $geoNear
para usar geonear definir indice con el atributo location. createIndex location: '2dsphrere'
var algo = {
  
  }
  it it it it
15- lockup
con find podemos usar javascript.
